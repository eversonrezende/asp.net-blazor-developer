@page "/products/edit/{id:int}"

@inject AppDbContext _context
@inject NavigationManager _navigationManager

<h1>@_model?.Title</h1>

<!--
    EditForm é o componente padrão de formulário do Blazor.
    Model é o objeto que será manipulado pelo formulário.
    OnValidSubmit é o evento que será chamado quando o formulário for submetido com sucesso.
-->
<EditForm Model="_model" OnValidSubmit="@HandleSubmitAsync">

    <!--
        DataAnnotationsValidator é o componente que faz a validação dos dados do formulário
            baseado nas DataAnnotations.
        ValidationSummary é o componente que exibe as mensagens de erro de validação.
    -->
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!--
        InputText é o componente padrão de input do Blazor.
        bind-value é a diretiva que faz o binding do valor do input com a propriedade do objeto.
    -->
    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText class="form-control"
                   type="text"
                   id="Title"
                   @bind-Value="_model.Title" />
    </div>

    <!--
        InputNumber é o componente padrão de input do Blazor para números.
        bind-value é a diretiva que faz o binding do valor do input com a propriedade do objeto.
    -->
    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber class="form-control"
                     type="number"
                     id="Price"
                     @bind-Value="_model.Price" />
    </div>

    <!--
        InputSelect é o componente padrão de select do Blazor.
        bind-value é a diretiva que faz o binding do valor do select com a propriedade do objeto.
        option é o componente que representa uma opção do select.
    -->
    <div class="mb-3">
        <label for="CategoryId" class="form-label">Category</label>
        <InputSelect class="form-control"
                     id="CategoryId"
                     @bind-Value="_model.CategoryId">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">
                    @category.Title
                </option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }

    <button class="btn btn-success" type="submit">
        Save
    </button>

</EditForm>

@code
{
    [Parameter]
    public int Id { get; set; }

    Product? _model = new();
    List<Category> _categories = new();
    string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        _categories = await _context
            .Categories
            .AsNoTracking()
            .OrderBy(x => x.Title)
            .ToListAsync();

        _model = await _context
            .Products
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id == Id);
    }

    async Task HandleSubmitAsync()
    {
        try
        {
            var prod = await _context.Products.FindAsync(Id);
            if(prod is null)
                throw new Exception("Produto não encontrado.");

            prod.Title = _model.Title;
            prod.Price = _model.Price;
            prod.CategoryId = _model.CategoryId;

            _context.Products.Update(prod);
            await _context.SaveChangesAsync();

            _navigationManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }
}